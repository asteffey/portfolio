{"version":3,"sources":["components/Project.tsx","hooks/useProjects.ts","components/Projects.tsx","components/App.tsx","serviceWorker.ts","index.tsx","components/external-link.svg","components/github.svg"],"names":["ProjectTile","styled","div","Info","Links","Project","id","name","tags","website","github","description","console","log","src","process","alt","join","href","target","rel","githubIcon","externalIcon","toId","escape","split","toLowerCase","useProjects","useState","projects","setProjects","useEffect","fetch","then","response","json","data","map","other","catch","error","ProjectList","Projects","project","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"isEAKA,IAAMA,EAAcC,IAAOC,IAAV,KA8CXC,EAAOF,IAAOC,IAAV,KAgCJE,EAAQH,IAAOC,IAAV,KAqDIG,EAzBC,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,GAAIC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,YAElD,OADAC,QAAQC,IAAIP,GAEV,kBAACN,EAAD,KACE,4BAAKO,GACL,yBAAKO,IAAG,UAAKC,aAAL,+BAAkDT,EAAlD,QAA4DU,IAAKT,IACzE,kBAACJ,EAAD,KACE,4BAAKI,GACL,4BAAKC,EAAKS,KAAK,OACf,2BAAIN,GACJ,kBAACP,EAAD,KACE,uBAAGc,KAAMR,EAAQS,OAAO,SAASC,IAAI,uBACnC,yBAAKN,IAAKO,IAAYL,IAAI,0BAD5B,eAICP,GAAW,uBAAGS,KAAMT,EAASU,OAAO,SAASC,IAAI,uBAChD,yBAAKN,IAAKQ,IAAcN,IAAI,iBADlB,iB,wBC5HhBO,EAAO,SAAChB,GAAD,OAAkBiB,OAAOjB,EAAKkB,MAAM,KAAKR,KAAK,KAAKS,gBAsBjDC,EApBK,WAAO,IAAD,EACQC,mBAAoB,IAD5B,mBACjBC,EADiB,KACPC,EADO,KAiBxB,OAdAC,qBAAU,WACRC,MAAM,GAAD,OAAIjB,aAAJ,mBACFkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACLN,EACEM,EAAKC,KAAI,gBAAG9B,EAAH,EAAGA,KAAS+B,EAAZ,8CACJA,EADI,CAEPhC,GAAIiB,EAAKhB,GACTA,gBAGHgC,OAAM,SAAAC,GAAK,OAAI5B,QAAQ4B,MAAMA,QACjC,IAEIX,G,uRChBT,IAAMY,EAAcxC,IAAOC,IAAV,KA4BFwC,EAdE,WACf,IAAMb,EAAWF,IAEjB,OACE,kBAACc,EAAD,YAEIZ,QAFJ,IAEIA,OAFJ,EAEIA,EAAUQ,KAAI,SAACM,EAASC,GAAV,OACZ,kBAAC,EAAD,eAASC,IAAKD,GAAWD,SCdpBG,MATf,WACE,OACE,oCACE,yCACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,qBDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMsB,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,2C,kBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.a5624fdf.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport externalIcon from './external-link.svg'\nimport githubIcon from './github.svg'\n\nconst ProjectTile = styled.div`\n  display: block;\n  width: 90vw;\n  height: 67.5vw;\n  max-width: 400px;\n  max-height: 300px;\n  margin: 3px;\n  padding: 0;\n  position: relative;\n  border: 2px ridge rgba(0, 0, 0, 0.3);\n  \n  >h3 {\n    display: block;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    z-index: 5;\n    width: 100%;\n    text-shadow: 0 0 0.1em #FFF, 0 0 0.2em #FFF, 0 0 0.3em #FFF, 0 0 0.4em #FFF;\n    color: #113;\n    font-size: 1.5em;\n  }\n}\n  \n  >img {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    visibility: visible;\n    opacity: 1;\n    transition: visibility 0.3s, opacity 0.3s linear;\n  }\n  \n  :hover>img, :hover>h3,\n  :active>img, :active>h3 {\n      visibility: hidden;\n      opacity: 0;\n  }\n`\n\nconst Info = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: #eee;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 1.25em 1.25em;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  \n  h3 {\n    margin: 3px;\n    font-size: 1.5em;\n  }\n  \n  h4 {\n    margin: 0.3125em;\n    font-style: oblique;\n    color: #334;\n    font-weight: 500;\n  }\n  \n  p {\n    font-weight: 600;\n    font-size: 0.9em;\n  }\n`\n\nconst Links = styled.div`\n  position: absolute;\n  bottom: 0.9375em;\n  height: 1.875em;\n  line-height: 1.875em;\n  display: flex;\n  \n  a {\n    display: flex;\n    text-decoration: none;\n    margin-right: 1.25em;\n    color: black;\n    font-weight: 700;\n  }\n  a:hover {\n    color: #e31b3c;\n  }\n  \n  a > img {\n    height: 1.875em;\n    width: 1.875em;\n    margin-right: 0.375em;\n  }\n  a:hover > img {\n    filter: invert(20%) sepia(89%) saturate(3056%) hue-rotate(338deg) brightness(89%) contrast(100%);\n  }\n`\n\nconst Project = ({ id, name, tags, website, github, description }: Project) => {\n  console.log(id)\n  return (\n    <ProjectTile>\n      <h3>{name}</h3>\n      <img src={`${process.env.PUBLIC_URL}/images/screenshots/${id}.png`} alt={name} />\n      <Info>\n        <h3>{name}</h3>\n        <h4>{tags.join(', ')}</h4>\n        <p>{description}</p>\n        <Links>\n          <a href={github} target='_blank' rel='noopener noreferrer'>\n            <img src={githubIcon} alt='View source at GitHub'/>\n            View Source\n          </a>\n          {website && <a href={website} target='_blank' rel='noopener noreferrer'>\n            <img src={externalIcon} alt='Link to site'/>\n            View Site\n          </a>}\n        </Links>\n      </Info>\n    </ProjectTile>\n  )\n}\n\nexport default Project\n","import { useState, useEffect } from 'react'\n\nconst toId = (name: string) => escape(name.split(' ').join('_').toLowerCase())\n\nconst useProjects = () => {\n  const [projects, setProjects] = useState<Project[]>([])\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/projects.json`)\n      .then(response => response.json())\n      .then((data: Project[]) => {\n        setProjects(\n          data.map(({ name, ...other }) => ({\n            ...other,\n            id: toId(name),\n            name\n          }))\n        )\n      }).catch(error => console.error(error))\n  }, [])\n\n  return projects\n}\n\nexport default useProjects\n","import React from 'react'\nimport styled from 'styled-components'\nimport Project from './Project'\nimport useProjects from '../hooks/useProjects'\n\nconst ProjectList = styled.div`\n  width: 1230px;\n  max-width: 100%;\n  margin: 20px auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  font-size: 3.56vw;\n\n  @media (min-width: 445px) {\n    font-size: 16px;\n  }\n`\n\nconst Projects = () => {\n  const projects = useProjects()\n\n  return (\n    <ProjectList>\n      {\n        projects?.map((project, index) =>\n          <Project key={index} {...project}/>\n        )\n      }\n    </ProjectList>\n  )\n}\n\nexport default Projects\n","import React from 'react'\nimport Projects from './Projects'\n\nfunction App () {\n  return (\n    <>\n      <h1>Portfolio</h1>\n      <Projects/>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('projects-section')\n)\n\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/external-link.24b341b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.617870e4.svg\";"],"sourceRoot":""}